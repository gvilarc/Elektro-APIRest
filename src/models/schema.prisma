// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  hash              String
  salt              String
  cpf               String    @unique
  addresses         Address[]
  products          Product[] @relation("SellerProducts")
  orders            Order[]
  cart              Cart?
  favorites         Favorite[]
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
}

model Address {
  id          Int     @id @default(autoincrement())
  number      String
  apartament  String
  cep         String
  neighborhood String
  city        String
  state       String
  user        User @relation(fields: [userId], references: [id])
  userId      Int
}

model Cart {
  user        User @relation(fields: [userId], references: [id])
  userId      Int @id
  totalPrice  Float 
  quantity    Int
  onTheCartOf ProductOnCart[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    
  products  ProductCategory[]   
}

model ProductCategory{
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Product {
  id                Int       @id @default(autoincrement())
  name              String
  description       String
  price             Decimal @db.Money
  quantity          Int
  categories        ProductCategory[]
  seller            User @relation("SellerProducts", fields: [sellerId], references: [id])
  sellerId          Int
  onTheOrderOf      BuyItem[]
  onTheCartOf       ProductOnCart[]
  favoriteProducts  Favorite[]
}

model ProductOnCart {
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  cart      Cart @relation(fields: [cartId], references: [userId])
  cartId    Int

  @@id([cartId, productId])
}

model Order {
  id         Int          @id @default(autoincrement())
  datetime   DateTime     @default(now())
  status     String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  items      BuyItem[]
  totalPrice Float
}

model BuyItem {
  order       Order  @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
  unitaryPrice Float

  @@id([orderId, productId])
}

model Favorite {
  buyer     User @relation(fields: [buyerId], references: [id])
  buyerId   Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@id([buyerId, productId])
}

model Message {
  id          Int @id @unique
  content     String
  sender      User @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int 
  receiver    User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  Int
  datetime    DateTime @default(now())
}